# pip install openai python-telegram-bot python-dotenv
from openai import OpenAI
from telegram.ext import Application, MessageHandler, filters
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

OPENAI_KEY = os.environ["OPENAI_API_KEY"]
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
ASSISTANT_ID = os.environ["ASSISTANT_ID"]

client = OpenAI()
threads = {}  # chat_id -> thread_id (en memoria; luego usa Redis/DB)

async def handle_msg(update, context):
    chat_id = str(update.effective_chat.id)
    text = update.message.text

    # 1) thread por chat
    if chat_id not in threads:
        t = client.beta.threads.create()
        threads[chat_id] = t.id
    thread_id = threads[chat_id]

    # 2) mensaje del usuario
    client.beta.threads.messages.create(thread_id=thread_id, role="user", content=text)

    # 3) run del Assistant
    run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)

    # 4) poll básico
    import time
    while True:
        r = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if r.status in ["completed","failed","requires_action"]: break
        time.sleep(0.7)

    # 5) última respuesta
    msgs = client.beta.threads.messages.list(thread_id=thread_id, order="desc")
    reply = msgs.data[0].content[0].text.value
    await update.message.reply_text(reply)

async def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_msg))
    await app.run_polling(allowed_updates=["message"])

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
